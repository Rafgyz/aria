# SPDX-License-Identifier: Apache-2.0
extension Float {
    func sin() {
        val τ = Float.π*2;
        val ε = 0.000000000001f;
        val x = this % τ;
        if x > Float.π {
            x -= τ;
        }

        val term = x;
        val result = term;
        val n = 1;

        while term.abs() > ε {
            n += 2;
            term = term * (-x * x / (n * (n - 1)));
            result = result + term;
        }

        result;
    }

    func cos() {
        val τ = Float.π*2;
        val ε = 0.000000000001f;
        val x = this % τ;
        if x > Float.π {
            x -= τ;
        }

        val term = 1.0f;
        val result = term;
        val n = 0;

        while term.abs() > ε {
            n += 2;
            term = term * (-x * x / (n * (n - 1)));
            result = result + term;
        }

        result;
    }

    func tan() {
        this.sin() / this.cos();
    }

    func arcsin() {
        if this < -1.0f || this > 1.0f {
            throw Float.DomainError.new("not a valid sine value");
        }

        val ε = 0.000000000001f;
        val x = this;
        
        val term = x;
        val result = term;
        val n = 1;

        while term.abs() > ε {
            term = term * (x * x * (2 * n - 1) * (2 * n - 1)) / ((2 * n) * (2 * n + 1));
            result = result + term;
            n += 1;
        }

        result;
    }
    
    func arccos() {
        if this < -1.0f || this > 1.0f {
            throw Float.DomainError.new("not a valid cosine value");
        }

        Float.π / 2 - this.arcsin();
    }

    func arctan() {
        val ε = 0.000000000001f;
        val x = this;
        
        if x.abs() > 1.0f {
            val ret = (Float.π / 2 - (1.0f / x).arctan());
            if x <= 0 {
                return -ret;
            } else {
                return ret;
            }
        }

        if x.abs() > 0.5f {
            val y = (x - 1) / (x + 1);
            return (Float.π / 4 + y.arctan());
        }

        val term = x;
        val result = term;
        val n = 1;

        while term.abs() > ε {
            n += 2;
            term = term * (-x * x / n);
            result = result + term;
        }

        result;
    }
}
