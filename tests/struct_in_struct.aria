# SPDX-License-Identifier: Apache-2.0
struct Outer {
    struct Inner {
        type func new(x,y) {
            return alloc(This) {
                .x = x,
                .y = y,
            };
        }

        func i_add() {
            return this.x + this.y;
        }

        func i_sub() {
            return this.x - this.y;
        }

        func i_swap() {
            val x = this.x;
            val y = this.y;
            this.x = y;
            this.y = x;
            return this;
        }
    }

    type func new(x,y) {
        return alloc(This) {
            .impl = Outer.Inner.new(x,y),
        };
    }

    func add() {
        return this.impl.i_add();
    }

    func swap() {
        return this.impl.i_swap();
    }

    func sub() {
        return this.impl.i_sub();
    }
}

func main() {
    val o = Outer.new(8,2);
    assert o.add() == 10;
    o.swap();
    assert o.sub() == -6;

    # check that names are unique between Outer and Inner
    assert !hasattr(o, "i_swap");
    assert !hasattr(o.impl, "swap");

    assert hasattr(Outer, "Inner");
}
