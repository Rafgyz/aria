# SPDX-License-Identifier: Apache-2.0
flag: no_std;

# the logic here is inspired by the Midori first principles of error handling
# there are two kinds of errors: recoverable and fatal
# recoverable errors are here - ones that the vm runtime generates that it's ok for a user
# to try/catch on, handle and recover;
# others are fatal, e.g. invalid opcodes, failed assertions - they should bubble up all the way
# and cause the VM itself to stop executing
enum RuntimeError {
    struct ArgcMismatch {
        # the VM will not actually call this constructor - it will just
        # alloc and fill in the fields directly - putting any real code here
        # will just go unused
        type func new(e: Int, a: Int) {
            return alloc(This) {
                .expected = e,
                .actual = a,
            };
        }

        func prettyprint() {
            return "argument count mismatch, {0} expected, {1} actual".format(this.expected, this.actual);
        }
    }

    case DivisionByZero
    case EnumWithoutPayload
    case IndexOutOfBounds(Int)
    case MismatchedArgumentCount(RuntimeError.ArgcMismatch)
    case NoSuchCase(String)
    case NoSuchIdentifier(String)
    case OperationFailed(String),
    case UnexpectedType
}

extension RuntimeError {
    func prettyprint() {
        match this {
            case DivisionByZero => {
                return "division by zero";
            },
            case EnumWithoutPayload => {
                return "enum case has no payload";
            },
            case IndexOutOfBounds(n) => {
                return "index {0} is out of bounds".format(n);
            },
            case MismatchedArgumentCount(m) => {
                return m.prettyprint();
            },
            case NoSuchCase(s) => {
                return "case '{0}' not found".format(s);
            },
            case NoSuchIdentifier(s) => {
                return "identifier '{0}' not found".format(s);
            },
            case OperationFailed(s) => {
                return "operation failed: {0}".format(s);
            }
            case UnexpectedType => {
                return "unexpected type";
            }
        }

        return "unprintable error";
    }
}
